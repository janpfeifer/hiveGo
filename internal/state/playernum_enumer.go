// Code generated by "enumer -type=PlayerNum -trimprefix=Player -values -text -json -yaml state.go"; DO NOT EDIT.

package state

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PlayerNumName = "FirstSecondInvalid"

var _PlayerNumIndex = [...]uint8{0, 5, 11, 18}

const _PlayerNumLowerName = "firstsecondinvalid"

func (i PlayerNum) String() string {
	if i >= PlayerNum(len(_PlayerNumIndex)-1) {
		return fmt.Sprintf("PlayerNum(%d)", i)
	}
	return _PlayerNumName[_PlayerNumIndex[i]:_PlayerNumIndex[i+1]]
}

func (PlayerNum) Values() []string {
	return PlayerNumStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlayerNumNoOp() {
	var x [1]struct{}
	_ = x[PlayerFirst-(0)]
	_ = x[PlayerSecond-(1)]
	_ = x[PlayerInvalid-(2)]
}

var _PlayerNumValues = []PlayerNum{PlayerFirst, PlayerSecond, PlayerInvalid}

var _PlayerNumNameToValueMap = map[string]PlayerNum{
	_PlayerNumName[0:5]:        PlayerFirst,
	_PlayerNumLowerName[0:5]:   PlayerFirst,
	_PlayerNumName[5:11]:       PlayerSecond,
	_PlayerNumLowerName[5:11]:  PlayerSecond,
	_PlayerNumName[11:18]:      PlayerInvalid,
	_PlayerNumLowerName[11:18]: PlayerInvalid,
}

var _PlayerNumNames = []string{
	_PlayerNumName[0:5],
	_PlayerNumName[5:11],
	_PlayerNumName[11:18],
}

// PlayerNumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlayerNumString(s string) (PlayerNum, error) {
	if val, ok := _PlayerNumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlayerNumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PlayerNum values", s)
}

// PlayerNumValues returns all values of the enum
func PlayerNumValues() []PlayerNum {
	return _PlayerNumValues
}

// PlayerNumStrings returns a slice of all String values of the enum
func PlayerNumStrings() []string {
	strs := make([]string, len(_PlayerNumNames))
	copy(strs, _PlayerNumNames)
	return strs
}

// IsAPlayerNum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PlayerNum) IsAPlayerNum() bool {
	for _, v := range _PlayerNumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PlayerNum
func (i PlayerNum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PlayerNum
func (i *PlayerNum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PlayerNum should be a string, got %s", data)
	}

	var err error
	*i, err = PlayerNumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PlayerNum
func (i PlayerNum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PlayerNum
func (i *PlayerNum) UnmarshalText(text []byte) error {
	var err error
	*i, err = PlayerNumString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for PlayerNum
func (i PlayerNum) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PlayerNum
func (i *PlayerNum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PlayerNumString(s)
	return err
}
