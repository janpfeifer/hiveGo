// Code generated by "enumer -type=ModelType -trimprefix=Scorer -transform=snake -values -text -json -yaml model.go"; DO NOT EDIT.

package gomlx

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ModelTypeName = "nonefnn"

var _ModelTypeIndex = [...]uint8{0, 4, 7}

const _ModelTypeLowerName = "nonefnn"

func (i ModelType) String() string {
	if i < 0 || i >= ModelType(len(_ModelTypeIndex)-1) {
		return fmt.Sprintf("ModelType(%d)", i)
	}
	return _ModelTypeName[_ModelTypeIndex[i]:_ModelTypeIndex[i+1]]
}

func (ModelType) Values() []string {
	return ModelTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ModelTypeNoOp() {
	var x [1]struct{}
	_ = x[ModelNone-(0)]
	_ = x[ModelFNN-(1)]
}

var _ModelTypeValues = []ModelType{ModelNone, ModelFNN}

var _ModelTypeNameToValueMap = map[string]ModelType{
	_ModelTypeName[0:4]:      ModelNone,
	_ModelTypeLowerName[0:4]: ModelNone,
	_ModelTypeName[4:7]:      ModelFNN,
	_ModelTypeLowerName[4:7]: ModelFNN,
}

var _ModelTypeNames = []string{
	_ModelTypeName[0:4],
	_ModelTypeName[4:7],
}

// ModelTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ModelTypeString(s string) (ModelType, error) {
	if val, ok := _ModelTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ModelTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ModelType values", s)
}

// ModelTypeValues returns all values of the enum
func ModelTypeValues() []ModelType {
	return _ModelTypeValues
}

// ModelTypeStrings returns a slice of all String values of the enum
func ModelTypeStrings() []string {
	strs := make([]string, len(_ModelTypeNames))
	copy(strs, _ModelTypeNames)
	return strs
}

// IsAModelType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ModelType) IsAModelType() bool {
	for _, v := range _ModelTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ModelType
func (i ModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ModelType
func (i *ModelType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ModelType should be a string, got %s", data)
	}

	var err error
	*i, err = ModelTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ModelType
func (i ModelType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ModelType
func (i *ModelType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ModelTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ModelType
func (i ModelType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ModelType
func (i *ModelType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ModelTypeString(s)
	return err
}
